#! /usr/bin/env node

const semver = require('semver');
const package = require('../package.json');

const engineVersion = package.engines.node;

if (!semver.satisfies(process.version, engineVersion)) {
	console.log(`Required node version ${engineVersion} not satisfied with current version ${process.version}.`);
	process.exit(1);
}

const program = require('commander').program;
const version = package.version;

let options = {};

program.version(version);
program
	.description('Emulator UI.')
	.option('-r, --refresh', 'Should refresh');

program.parse(process.argv);

(function() {
	options = Object.assign(options, program.opts());

	const fs = require('fs');
	const path = require('path');
	const exec = require('child_process').exec;
	const open = require('open');

	const projectFolder = path.resolve(__dirname, '..');
	const bundleFile = path.resolve(projectFolder, './src/ui/build/bundle.js');
	const indexHTMLFile = path.resolve(projectFolder, './src/ui/index.html');

	const waitForBuild = function(timeout = 30000) {
		return new Promise((resolve, reject) => {
			let passedTime = 0;
			const intv = setInterval(() => {
				passedTime += 500;
				if (fs.existsSync(bundleFile)) {
					clearTimeout(intv);
					resolve(indexHTMLFile);
				} else if (passedTime >= timeout) {
					clearTimeout(intv);
					reject(new Error("Timeout"));
				}
			}, 500);
		});
	};

	const build = async function() {
		if (fs.existsSync(bundleFile) && options.refresh) {
			await exec(`rm ${bundleFile}`);
		}

		if (!fs.existsSync(bundleFile) || options.refresh) {
			console.log('Preparing ui...');
			await exec(`cd ${projectFolder} && npm run build`);
		}

		await waitForBuild();
		open(indexHTMLFile);
	};

	build();
})();