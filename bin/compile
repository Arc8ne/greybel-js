#! /usr/bin/env node
const semver = require('semver');
const package = require('../package.json');

const engineVersion = package.engines.node;

if (!semver.satisfies(process.version, engineVersion)) {
  console.log(`Required node version ${engineVersion} not satisfied with current version ${process.version}.`);
  process.exit(1);
}

const Parser = require('../src/parser');
const build = require('../src/build');
const path = require('path');
const fs = require('fs');
const program = require('commander').program;
const version = require('../package.json').version;
let options = {};

program.version(version);
program
	.arguments('<filepath>')
	.arguments('[output]')
	.description('Compiler for Greyscript.', {
		filepath: 'File to compile',
		output: 'Output directory'
	})
	.action(function (filepath, output) {
		options.filepath = filepath;

		if (output) {
			options.output = output;
		}
	})
	.option('-ev, --env-files <file...>', 'Environment variables files')
	.option('-vr, --env-vars <var...>', 'Environment variables')
	.option('-en, --exclude-namespaces <namespace...>', 'Exclude namespaces from optimization')
	.option('-u, --uglify', 'Uglify your code')
	.option('-n, --name', 'Output filename')
	.option('-i, --installer', 'Create installer for GreyScript (Should be used if you use import_code)');

program.parse(process.argv);

(function() {
	options = Object.assign(options, program.opts());

	build(options.filepath, options.output, {
		envFiles: options.envFiles,
		envVars: options.envVars,
		uglify: options.uglify,
		excludedNamespaces: options.excludeNamespaces || [],
		name: options.name,
		installer: options.installer
	});
})();