// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`build-light default scripts 1`] = `
"AsciiGen={}
map={}
map.a=[\\"||¯|| \\",\\"||_|| \\",\\"|| || \\"]
map.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
map.c=[\\"||¯ \\",\\"||  \\",\\"||_ \\"]
map.d=[\\"||¯\\\\\\\\ \\",\\"|| // \\",\\"||//  \\"]
map.e=[\\"||¯ \\",\\"||- \\",\\"||_ \\"]
map.f=[\\"||¯ \\",\\"||_ \\",\\"||  \\"]
map.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",\\"||_|| \\"]
map.h=[\\"|| || \\",\\"||-|| \\",\\"|| || \\"]
map.i=[\\"|| \\",\\"|| \\",\\"|| \\"]
map.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
map.k=[\\"||  / \\",\\"|| /  \\",\\"||¯\\\\\\\\ \\"]
map.l=[\\"||  \\",\\"||  \\",\\"||_ \\"]
map.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
map.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
map.o=[\\"||¯|| \\",\\"|| || \\",\\"||_|| \\"]
map.p=[\\"||¯|| \\",\\"||_|| \\",\\"||    \\"]
map.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
map.r=[\\"||¯|| \\",\\"||¯\\\\\\\\ \\",\\"|| || \\"]
map.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
map.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
map.u=[\\"|| || \\",\\"|| || \\",\\"||_|| \\"]
map.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
map.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
map.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
map.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
map.z=[\\"¯// \\",\\"//  \\",\\"||_ \\"]
map[\\"0\\"]=[\\"||¯|| \\",\\"||x|| \\",\\"||_|| \\"]
map[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
map[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
map[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
map[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
map[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
map[\\"6\\"]=[\\"||¯¯  \\",\\"||¯|| \\",\\"||_|| \\"]
map[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
map[\\"8\\"]=[\\"||¯|| \\",\\"||-|| \\",\\"||_|| \\"]
map[\\"9\\"]=[\\"||¯|| \\",\\"  ¯|| \\",\\"  //  \\"]
map[\\" \\"]=[\\"  \\",\\"  \\",\\"  \\"]
AsciiGen.MAP=map
AsciiGen.gen=function (str,colors)
r=[[],[],[]]
signs=self.MAP
for char in str
char=char.lower
if signs.hasIndex(char) then
r[0].push(signs[char][0])
r[1].push(signs[char][1])
r[2].push(signs[char][2])
end if
end for
if (typeof(colors) == \\"string\\") then
r[0]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors) + \\">\\")] + r[2]) + [\\"</color>\\"])
else if (typeof(colors) == \\"list\\") then
r[0]=(([((\\"<color=#\\" + colors[0]) + \\">\\")] + r[0]) + [\\"</color>\\"])
r[1]=(([((\\"<color=#\\" + colors[1]) + \\">\\")] + r[1]) + [\\"</color>\\"])
r[2]=(([((\\"<color=#\\" + colors[2]) + \\">\\")] + r[2]) + [\\"</color>\\"])
end if
return [r[0].join(\\"\\"),r[1].join(\\"\\"),r[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(AsciiGen.gen(\\"Hallo\\"))"
`;

exports[`build-light default scripts 2`] = `
"a=(a / b)
a=(a * b)
a=(a - b)
a=(a + b)
(bitwise(\\"<<\\",a,b))
(bitwise(\\">>\\",a,b))
w=(bitwise(\\">>\\",(bitwise(\\">>>\\",a,(bitwise(\\"<<\\",b,c)))),a))
(bitwise(\\"|\\",a,b))
(bitwise(\\"&\\",a,b))
(bitwise(\\"^\\",a,b))
(a and b)
(a or b)"
`;

exports[`build-light default scripts 3`] = `
"test=(((-1 + 2) + -2) + +3)
foo=[-1,(-2 + 4),((-2 + -4) + +6)]
print(test)
print(foo)"
`;

exports[`build-light default scripts 4`] = `
"PasswordGenerator={}
PasswordGenerator.MAX_PASSWORD_LENGTH=15
PasswordGenerator.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
PasswordGenerator.NUMBER_CHARACTERS=\\"0123456789\\"
PasswordGenerator.ALPHA_NUMERIC=((PasswordGenerator.ALPHABETIC_CHARACTERS + PasswordGenerator.ALPHABETIC_CHARACTERS.upper) + PasswordGenerator.NUMBER_CHARACTERS)
PasswordGenerator.constructor=function ()
me=self
me.buffer=[0]
me.characters=me.ALPHA_NUMERIC
return me
end function
PasswordGenerator.increaseBuffer=function (i)
me=self
currentCharBuffer=me.buffer
maxBufferSize=me.characters.len
if (i == null) then i=(currentCharBuffer.len - 1)
p=currentCharBuffer[i]
p=(p + 1)
currentCharBuffer[i]=p
if (p == maxBufferSize) then
currentCharBuffer[i]=0
if (i == 0) then
currentCharBuffer.push(0)
else
me.increaseBuffer((i - 1))
end if
end if
end function
PasswordGenerator.gen=function ()
me=self
currentCharBuffer=me.buffer
generatorCharacters=me.characters
password=\\"\\"
index=0
while (index < currentCharBuffer.len)
pointer=currentCharBuffer[index]
password=(password + generatorCharacters[pointer])
if (index == (currentCharBuffer.len - 1)) then self.increaseBuffer()
index=(index + 1)
end while
if (currentCharBuffer.len > me.MAX_PASSWORD_LENGTH) then
return null
end if
return password
end function
pgen=(new PasswordGenerator).constructor()
index=0
max=10
result=[]
while (index < max)
result.push(pgen.gen())
index=(index + 1)
end while
print(result)"
`;

exports[`build-light default scripts 5`] = `
"String={}
String.constructor=function (str)
self.str=str
return self
end function
String.parse=function (values)
result=self.str
index=0
maxIndex=values.len
while (index < maxIndex)
result=result.replace((\\"$\\" + index),values[index])
index=(index + 1)
end while
return (new self).constructor(result)
end function
String.startsWith=function (str)
return (self.str.indexOf(str) == 0)
end function
String.substr=function (startIndex,endIndex)
return (new self).constructor(slice(self.str,startIndex,endIndex))
end function
String.indexOf=function (str)
return self.str.indexOf(str)
end function
String.replace=function (str,newStr)
return (new self).constructor(self.str.replace(str,newStr))
end function
String.remove=function (str)
return (new self).constructor(self.str.remove(str))
end function
String.toString=function ()
return self.str
end function
String.length=function ()
return self.str.len
end function
String.split=function (seperator)
return self.str.split(seperator)
end function
String.trim=function (seperator)
return (new self).constructor(self.str.trim())
end function
Error={}
Error.String=String
Error.constructor=function (message,values)
m=self
m.message=message
if (values != null) then
m.message=(new m.String).constructor(message).parse(values).toString()
end if
return m
end function
Error.throw=function ()
exit(((\\"<color=#ff0000>\\" + self.message) + \\"</color>\\"))
end function
Crypto={}
Crypto.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
Crypto.maxCharCode=55295
Crypto.Error=Error
Crypto.constructor=function (defaultSecret,hashFn,charset)
me=self
me.defaultSecret=defaultSecret
me.table=charset
me.hashFn=@hashFn
if (@hashFn == null) then me.hashFn=@md5
if (charset == null) then me.table=me.defaultCharset
if (me.table.len != 64) then (new me.Error).constructor(\\"Invalid charset $0...\\",[me.table]).throw()
return me
end function
Crypto.getHash=function (pw)
me=self
hash=[]
x=me.hashFn(pw)
for char in x
hash.push(char.code)
end for
hash.reverse
return hash
end function
Crypto.encrypt=function (str,pw)
me=self
if (pw == null) then pw=me.defaultSecret
hash=me.getHash(pw)
hashPointer=0
output=[]
position=0
padding=(str.len % 3)
max=(str.len - padding)
get=function (v)
if not me.table.hasIndex(v) then
(new me.Error).constructor(\\"Invalid index $0...\\",[v]).throw()
end if
return me.table[v]
end function
AND=function (a,b)
return bitwise(\\"&\\",a,b)
end function
LSHIFT=function (a,b)
return bitwise(\\"<<\\",a,b)
end function
RSHIFT=function (a,b)
return bitwise(\\">>\\",a,b)
end function
while (position < max)
m=hash[((position % hash.len) - 1)]
a=LSHIFT((str[position].code + m),16)
b=LSHIFT((str[(position + 1)].code + m),8)
c=(str[(position + 2)].code + m)
buffer=((a + b) + c)
output.push(get(AND(RSHIFT(buffer,18),63)))
output.push(get(AND(RSHIFT(buffer,12),63)))
output.push(get(AND(RSHIFT(buffer,6),63)))
output.push(get(AND(buffer,63)))
position=(position + 3)
end while
if (padding == 2) then
m=hash[((position % hash.len) - 1)]
a=LSHIFT((str[position].code + m),8)
b=(str[(position + 1)].code + m)
buffer=(a + b)
output.push(get(RSHIFT(buffer,10)))
output.push(get(AND(RSHIFT(buffer,4),63)))
output.push(get(AND(LSHIFT(buffer,2),63)))
output.push(\\"=\\")
else if (padding == 1) then
m=hash[((position % hash.len) - 1)]
buffer=(str[position].code + m)
output.push(get(RSHIFT(buffer,2)))
output.push(get(AND(LSHIFT(buffer,4),63)))
output.push(\\"==\\")
end if
return output.join(\\"\\")
end function
Crypto.decrypt=function (str,pw)
me=self
if (pw == null) then pw=me.defaultSecret
hash=me.getHash(pw)
hashPointer=0
hashLength=hash.len
output=[]
bitCounter=0
bitStorage=0
position=0
hashPointer=0
max=str.len
AND=function (a,b)
return bitwise(\\"&\\",a,b)
end function
RSHIFT=function (a,b)
return bitwise(\\">>\\",a,b)
end function
while (position < max)
buffer=me.table.indexOf(str[position])
currentBit=bitCounter
bitCounter=(bitCounter + 1)
if (currentBit % 4) then
bitStorage=((bitStorage * 64) + buffer)
else
bitStorage=buffer
end if
if (currentBit % 4) then
expectedHashIndex=(((floor((hashPointer / 3)) * 3) % hashLength) - 1)
if not hash.hasIndex(expectedHashIndex) then break
m=hash[expectedHashIndex]
operation=AND((-2 * bitCounter),6)
operation=RSHIFT(bitStorage,operation)
operation=AND(255,operation)
if (operation != 0) then
charCode=(operation - m)
if (charCode > me.maxCharCode) then break
output.push(char(charCode))
end if
hashPointer=(hashPointer + 1)
end if
position=(position + 1)
end while
return output.join(\\"\\")
end function
test=(new Crypto).constructor(\\"test\\")
foo=test.encrypt(user_input(\\"gif password\\"))
print(foo)
print(test.decrypt(foo))"
`;

exports[`build-light default scripts 6`] = `
"Random={}
Random.pool={}
Random.defaultSeed=\\"random\\"
Random.createPool=function (seed,val)
return {\\"seed\\":seed,\\"value\\":val,\\"generation\\":0}
end function
Random.calcSeed=function (seed)
seedVal=0
pos=seed.len
for char in seed
seedVal=((seedVal + char.code) + pos)
pos=(pos - 1)
end for
return seedVal
end function
Random.gen=function (min,max,seed,inc)
me=self
pool=me.pool
if (inc == null) then inc=true
if (seed == null) then seed=me.defaultSeed
if pool.hasIndex(seed) then
ps=pool[seed]
if not inc then return ps.value
ps.generation=(ps.generation + 1)
val=floor(((rnd((ps.value + ps.generation)) * (max - min)) + min))
ps.value=val
return val
end if
seedVal=me.calcSeed(seed)
val=floor(((rnd(seedVal) * (max - min)) + min))
pool[seed]=me.createPool(seedVal,val)
return val
end function
Random.seq=function (min,max,seed,amount,keepPool)
me=self
index=0
result=[]
while (index < amount)
temp=me.gen(min,max,seed)
result.push(temp)
index=(index + 1)
end while
if (keepPool != true) then me.pool.remove(seed)
return result
end function
Random.get=function (min,max)
return self.gen(min,max)
end function
print(Random.get(100,500))
print(Random.seq(100,500,\\"test\\",10))"
`;

exports[`build-light default scripts 7`] = `
"test={}
test.here=\\"was\\"
test.was=function ()
print(self.here)
end function
print(test.was())"
`;

exports[`build-light default scripts 8`] = `
"test=function ()
return null
end function
print((@\\"was\\".split and (false or not false)))
print(@(\\"was\\".split and (false or not false)))
print((not \\"was\\".split and (false or not false)))
print(not (\\"was\\".split and (false or not false)))
print((-1 + 2))
print(-(1 + 2))"
`;

exports[`build-light uglify scripts 1`] = `
"globals.AC=globals
AC.f=\\"||¯|| \\"
AC.d=\\"||_|| \\"
AC.T=\\"|| || \\"
AC.P=\\"||¯ \\"
AC.Z=\\"||  \\"
AC.Q=\\"||_ \\"
AC.i=\\"||¯\\\\\\\\ \\"
AC.V=\\"|| \\"
AC.r=\\"  \\"
AC.y=\\"<color=#\\"
AC._A=\\">\\"
AC.z=\\"</color>\\"
H={}
I={}
I.a=[f,d,T]
I.b=[\\"||¯/ \\",\\"|| \\\\ \\",\\"||_/ \\"]
I.c=[P,Z,Q]
I.d=[i,\\"|| // \\",\\"||//  \\"]
I.e=[P,\\"||- \\",Q]
I.f=[P,Q,Z]
I.g=[\\"||¯¯  \\",\\"|| \\\\\\\\ \\",d]
I.h=[T,\\"||-|| \\",T]
I.i=[V,V,V]
I.j=[\\" ¯||¯ \\",\\"  ||  \\",\\"|_||  \\"]
I.k=[\\"||  / \\",\\"|| /  \\",i]
I.l=[Z,Z,Q]
I.m=[\\"||\\\\\\\\/|| \\",\\"||   || \\",\\"||   || \\"]
I.n=[\\"||\\\\\\\\ || \\",\\"|| \\\\\\\\|| \\",\\"||  \\\\|| \\"]
I.o=[f,T,d]
I.p=[f,d,\\"||    \\"]
I.q=[\\"||¯||  \\",\\"|| ||  \\",\\"||_||¬ \\"]
I.r=[f,i,T]
I.s=[\\"||¯¯ \\",\\" \\\\\\\\  \\",\\"__|| \\"]
I.t=[\\"¯||¯ \\",\\" ||  \\",\\" ||  \\"]
I.u=[T,T,d]
I.v=[\\"\\\\\\\\ || \\",\\" \\\\\\\\|| \\",\\"  \\\\\\\\| \\"]
I.w=[\\"\\\\\\\\ |\\\\\\\\ | \\",\\" \\\\\\\\| \\\\\\\\| \\",\\"  \\\\\\\\  \\\\\\\\ \\"]
I.x=[\\"\\\\\\\\  / \\",\\" \\\\\\\\/  \\",\\" //\\\\  \\"]
I.y=[\\"\\\\\\\\  // \\",\\" \\\\\\\\//  \\",\\"  ||   \\"]
I.z=[\\"¯// \\",\\"//  \\",Q]
I[\\"0\\"]=[f,\\"||x|| \\",d]
I[\\"1\\"]=[\\"'|| \\",\\" || \\",\\" || \\"]
I[\\"2\\"]=[\\"¯¯|| \\",\\"||¯  \\",\\"||_  \\"]
I[\\"3\\"]=[\\"¯|| \\",\\"-|| \\",\\"_|| \\"]
I[\\"4\\"]=[\\" /|| \\",\\"/_|| \\",\\"  || \\"]
I[\\"5\\"]=[\\"||¯¯ \\",\\" ¯|| \\",\\" _|| \\"]
I[\\"6\\"]=[\\"||¯¯  \\",f,d]
I[\\"7\\"]=[\\"¯¯// \\",\\" //  \\",\\"//   \\"]
I[\\"8\\"]=[f,\\"||-|| \\",d]
I[\\"9\\"]=[f,\\"  ¯|| \\",\\"  //  \\"]
I[\\" \\"]=[r,r,r]
H.MAP=I
H.gen=function(str,u)
h=[[],[],[]]
v=self.MAP
for char in str
char=char.lower
if v.hasIndex(char) then
h[0].push(v[char][0])
h[1].push(v[char][1])
h[2].push(v[char][2])
end if
end for
if (typeof(u)==\\"string\\") then
h[0]=(([((y+u)+_A)]+h[0])+[z])
h[1]=(([((y+u)+_A)]+h[1])+[z])
h[2]=(([((y+u)+_A)]+h[2])+[z])
else if (typeof(u)==\\"list\\") then
h[0]=(([((y+u[0])+_A)]+h[0])+[z])
h[1]=(([((y+u[1])+_A)]+h[1])+[z])
h[2]=(([((y+u[2])+_A)]+h[2])+[z])
end if
return [h[0].join(\\"\\"),h[1].join(\\"\\"),h[2].join(\\"\\")].join(\\"\\\\n\\")
end function
print(H.gen(\\"Hallo\\"))"
`;

exports[`build-light uglify scripts 2`] = `
"globals.L=globals
H=(H/I)
H=(H*I)
H=(H-I)
H=(H+I)
(bitwise(\\"<<\\",H,I))
(bitwise(\\">>\\",H,I))
J=(bitwise(\\">>\\",(bitwise(\\">>>\\",H,(bitwise(\\"<<\\",I,K)))),H))
(bitwise(\\"|\\",H,I))
(bitwise(\\"&\\",H,I))
(bitwise(\\"^\\",H,I))
(H and I)
(H or I)"
`;

exports[`build-light uglify scripts 3`] = `
"globals.J=globals
H=(((-1+2)+-2)++3)
I=[-1,(-2+4),((-2+-4)++6)]
print(H)
print(I)"
`;

exports[`build-light uglify scripts 4`] = `
"globals.f=globals
H={}
H.MAX_PASSWORD_LENGTH=15
H.ALPHABETIC_CHARACTERS=\\"qwertzuiopasdfghjklyxcvbnm\\"
H.NUMBER_CHARACTERS=\\"0123456789\\"
H.ALPHA_NUMERIC=((H.ALPHABETIC_CHARACTERS+H.ALPHABETIC_CHARACTERS.upper)+H.NUMBER_CHARACTERS)
H.constructor=function()
N=self
N.buffer=[0]
N.characters=N.ALPHA_NUMERIC
return N
end function
H.increaseBuffer=function(R)
N=self
S=N.buffer
T=N.characters.len
if (R==null) then R=(S.len-1)
V=S[R]
V=(V+1)
S[R]=V
if (V==T) then
S[R]=0
if (R==0) then
S.push(0)
else
N.increaseBuffer((R-1))
end if
end if
end function
H.gen=function()
N=self
S=N.buffer
Y=N.characters
Z=\\"\\"
a=0
while (a<S.len)
b=S[a]
Z=(Z+Y[b])
if (a==(S.len-1)) then self.increaseBuffer
a=(a+1)
end while
if (S.len>N.MAX_PASSWORD_LENGTH) then
return null
end if
return Z
end function
c=(new H).constructor
a=0
d=10
e=[]
while (a<d)
e.push(c.gen)
a=(a+1)
end while
print(e)"
`;

exports[`build-light uglify scripts 5`] = `
"globals.Ab=globals
Ab.AY=1
Ab.AO=63
Ab.m=null
H={}
H.constructor=function(str)
self.str=str
return self
end function
H.parse=function(J)
K=self.str
L=0
M=J.len
while (L<M)
K=K.replace((\\"$\\"+L),J[L])
L=(L+AY)
end while
return (new self).constructor(K)
end function
H.startsWith=function(str)
return (self.str.indexOf(str)==0)
end function
H.substr=function(S,T)
return (new self).constructor(slice(self.str,S,T))
end function
H.indexOf=function(str)
return self.str.indexOf(str)
end function
H.replace=function(str,U)
return (new self).constructor(self.str.replace(str,U))
end function
H.remove=function(str)
return (new self).constructor(self.str.remove(str))
end function
H.toString=function()
return self.str
end function
H.length=function()
return self.str.len
end function
H.split=function(Y)
return self.str.split(Y)
end function
H.trim=function(Y)
return (new self).constructor(self.str.trim)
end function
AF={}
AF.String=H
AF.constructor=function(AH,J)
AL=self
AL.message=AH
if (J!=m) then
AL.message=(new AL.String).constructor(AH).parse(J).toString
end if
return AL
end function
AF.throw=function()
exit(((\\"<color=#ff0000>\\"+self.message)+\\"</color>\\"))
end function
e={}
e.defaultCharset=\\"QWERTZUIOPASDFGHJKLYXCVBNMqwertzuiopasdfghjklyxcvbnm1234567890+-\\"
e.maxCharCode=55295
e.Error=AF
e.constructor=function(h,i,j)
k=self
k.defaultSecret=h
k.table=j
k.hashFn=@i
if (@i==m) then k.hashFn=@md5
if (j==m) then k.table=k.defaultCharset
if (k.table.len!=64) then (new k.Error).constructor(\\"Invalid charset $0...\\",[k.table]).throw
return k
end function
e.getHash=function(o)
k=self
p=[]
q=k.hashFn(o)
for char in q
p.push(char.code)
end for
p.reverse
return p
end function
e.encrypt=function(str,o)
k=self
if (o==m) then o=k.defaultSecret
p=k.getHash(o)
AC=0
w=[]
x=0
y=(str.len%3)
z=(str.len-y)
_A=function(AB)
if not k.table.hasIndex(AB) then
(new k.Error).constructor(\\"Invalid index $0...\\",[AB]).throw
end if
return k.table[AB]
end function
AD=function(AE,AG)
return bitwise(\\"&\\",AE,AG)
end function
AI=function(AE,AG)
return bitwise(\\"<<\\",AE,AG)
end function
AJ=function(AE,AG)
return bitwise(\\">>\\",AE,AG)
end function
while (x<z)
AL=p[((x%p.len)-AY)]
AE=AI((str[x].code+AL),16)
AG=AI((str[(x+AY)].code+AL),8)
AK=(str[(x+2)].code+AL)
AN=((AE+AG)+AK)
w.push(_A(AD(AJ(AN,18),AO)))
w.push(_A(AD(AJ(AN,12),AO)))
w.push(_A(AD(AJ(AN,6),AO)))
w.push(_A(AD(AN,AO)))
x=(x+3)
end while
if (y==2) then
AL=p[((x%p.len)-AY)]
AE=AI((str[x].code+AL),8)
AG=(str[(x+AY)].code+AL)
AN=(AE+AG)
w.push(_A(AJ(AN,10)))
w.push(_A(AD(AJ(AN,4),AO)))
w.push(_A(AD(AI(AN,2),AO)))
w.push(\\"=\\")
else if (y==AY) then
AL=p[((x%p.len)-AY)]
AN=(str[x].code+AL)
w.push(_A(AJ(AN,2)))
w.push(_A(AD(AI(AN,4),AO)))
w.push(\\"==\\")
end if
return w.join(\\"\\")
end function
e.decrypt=function(str,o)
k=self
if (o==m) then o=k.defaultSecret
p=k.getHash(o)
AC=0
AR=p.len
w=[]
AS=0
AT=0
x=0
AC=0
z=str.len
AD=function(AE,AG)
return bitwise(\\"&\\",AE,AG)
end function
AJ=function(AE,AG)
return bitwise(\\">>\\",AE,AG)
end function
while (x<z)
AN=k.table.indexOf(str[x])
AU=AS
AS=(AS+AY)
if (AU%4) then
AT=((AT*64)+AN)
else
AT=AN
end if
if (AU%4) then
AV=(((floor((AC/3))*3)%AR)-AY)
if not p.hasIndex(AV) then break
AL=p[AV]
AW=AD((-2*AS),6)
AW=AJ(AT,AW)
AW=AD(255,AW)
if (AW!=0) then
AX=(AW-AL)
if (AX>k.maxCharCode) then break
w.push(char(AX))
end if
AC=(AC+AY)
end if
x=(x+AY)
end while
return w.join(\\"\\")
end function
AZ=(new e).constructor(\\"test\\")
Aa=AZ.encrypt(user_input(\\"gif password\\"))
print(Aa)
print(AZ.decrypt(Aa))"
`;

exports[`build-light uglify scripts 6`] = `
"globals.j=globals
H={}
H.pool={}
H.defaultSeed=\\"random\\"
H.createPool=function(L,M)
return {\\"seed\\":L,\\"value\\":M,\\"generation\\":0}
end function
H.calcSeed=function(L)
O=0
P=L.len
for char in L
O=((O+char.code)+P)
P=(P-1)
end for
return O
end function
H.gen=function(T,U,L,V)
W=self
I=W.pool
if (V==null) then V=true
if (L==null) then L=W.defaultSeed
if I.hasIndex(L) then
X=I[L]
if not V then return X.value
X.generation=(X.generation+1)
M=floor(((rnd((X.value+X.generation))*(U-T))+T))
X.value=M
return M
end if
O=W.calcSeed(L)
M=floor(((rnd(O)*(U-T))+T))
I[L]=W.createPool(O,M)
return M
end function
H.seq=function(T,U,L,b,c)
W=self
d=0
e=[]
while (d<b)
f=W.gen(T,U,L)
e.push(f)
d=(d+1)
end while
if (c!=true) then W.pool.remove(L)
return e
end function
H.get=function(T,U)
return self.gen(T,U)
end function
print(H.get(100,500))
print(H.seq(100,500,\\"test\\",10))"
`;

exports[`build-light uglify scripts 7`] = `
"globals.K=globals
H={}
H.here=\\"was\\"
H.was=function()
print(self.here)
end function
print(H.was)"
`;

exports[`build-light uglify scripts 8`] = `
"globals.L=globals
L.K=\\"was\\"
L.J=false
H=function()
return null
end function
print((@K.split and (J or not J)))
print(@(K.split and (J or not J)))
print((not K.split and (J or not J)))
print(not (K.split and (J or not J)))
print((-1+2))
print(-(1+2))"
`;
